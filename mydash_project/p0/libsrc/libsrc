#include <stdio.h>
#include <stdlib.h>
#include "List.h"

struct list * createList(int (*equals)(const void *,const void *),
			 char * (*toString)(const void *),
			 void (*freeObject)(void *))
{
	struct list *list;
	list = (struct list *) malloc(sizeof(struct list));
	list->size = 0;
	list->head = NULL;
	list->tail = NULL;
	list->equals = equals;
	list->toString = toString;
	list->freeObject = freeObject;
	return list;
}

void freeList(struct list *list)
{
	if(!list){ //means if(list == NULL) 
		return;
	} else //free list 
  	struct node* curr = list->head;	// 1) create a current node    //not sure if this syntax is correct. make sure and ask.
	struct node* temp;	           // 2) create a temp node.
	while(list){ //means if(list != NULL) 
		 temp = curr;
		 curr = curr->next
		 free(temp) 
	}
	
}

int getSize(const struct list *list)
{
	if(!list){
	return 0;
	}

	return list->size;
}

int isEmpty(const struct list *list)
{
	if(list->size == 0 || list==NULL){
		return 1; //1 means true 
	} else
	return 0;//0 means false
}

void addAtFront(struct list *list, struct node *node)
{
	if (list == NULL) return;
	if (node == NULL) return;
	list->size++;
	node->next = list->head;
	node->prev = NULL;
	if (list->head == NULL) {
		list->head = node;
		list->tail = node;
	} else {
		list->head->prev = node;
		list->head = node;
	}
}

void addAtRear(struct list *list, struct node *node)
{
	if(list==NULL) return;
	if(node==NULL) return;
	list->size++;
	node->prev = list->tail;
	node->next = NULL;
	if(list->tail==NULL) {
		list->head = node;
		list->tail = node;
	} else{
		list->tail->next = node; //ask question about this in class.
		list->tail = node;
	}
}

struct node* removeFront(struct list *list)
{ 
	if(list==NULL){ 
		return NULL;
	}
	struct node* temp = list->head;
	if(list->size == 1){
		list->head = NULL;
		return temp;			
	}
	list->head = list->head->next;
	list->head->previous = NULL;
	list->size--;	
	return temp; 
}

struct node* removeRear(struct list *list)
{ 
	if(list==NULL){
		return NULL;
	}
	struct node* temp = list->tail;
	if(list->size == 1){
		list->tail = NULL;
		return temp;		
	}	
	list->tail = list->tail->previous;
	list->tail->next = NULL;
	list->size--;
	return temp; 
}

struct node* removeNode(struct list *list, struct node *node)
{	
	if(!list){
		return NULL;
	}
	struct node* temp = node;
	if(list->size == 1){
		node = NULL;
		return temp;
	}
	if(node == list->head){
		removeFirst(list);
	}
	if(node == list->tail){
		removeRear(list);
	}
	
}


struct node* search(const struct list *list, const void *obj)
{
	struct node* curr = list->head;
	while(curr){
		if(list->equals(curr->obj, obj)){
			return curr;
		}  		
		curr = curr->next;
	}
	return NULL;
}

void reverseList(struct list *list)
{
}

void printList(const struct list *list)
{
	if (!list) return; //list was null!!
	int count = 0;
	char *output;
	struct node *temp = list->head;
	while (temp) {
		output = list->toString(temp->obj);
		printf(" %s -->",output);
		free(output);
		temp = temp->next;
		count++;
		if ((count % 6) == 0)
			printf("\n");
	}
	printf(" NULL \n");
}
